.code
Correct proc

; STORE OUTPUT ARRAY ADDRESS
MOV R13, RDX

; LOAD RGB VALUES ;
MOVQ XMM1, QWORD PTR [RCX] ;move 8 bytes (8xRGB Values) to xmm1 vector register

; CREATE MASK
; R8: RED, R9: GREEN, RSP+40: BLUE

; 255 - COLOR COMPONENT (R/G/B)

MOV R10, 255
SUB R10, R8 ;255-red

MOV R11, 255
SUB R11, R9 ;255-green

MOV R12, 255
SUB R12, [RSP+40] ;255-blue

; 255 / (255 - COLOR COMPONENT)

; 255/255-red
MOV RAX, 255
XOR RDX,RDX
DIV R10
MOV R8, RAX

; 255/255-green
MOV RAX, 255
XOR RDX,RDX
DIV R11
MOV R9, RAX

; 255/255-blue
MOV RAX, 255
XOR RDX,RDX
DIV R12
MOV R10, RAX

; COPY MASK TO RAX IN ORDER TO COPY IT TO VECTOR
MOV AL, R8b
SHL RAX, 8
MOV AL, R9b
SHL RAX, 8
MOV AL, R10b
SHL RAX, 8
MOV AL, R8b
SHL RAX, 8
MOV AL, R9b
SHL RAX, 8
MOV AL, R10b
SHL RAX, 8
MOV AL, R8b
SHL RAX, 8
MOV AL, R9b

; COPY MASK TO VECTOR REGISTER
MOVQ XMM2, RAX

; CONVERT 8 BIT VALUES TO 16 BIT FOR COMPATIBILITY WITH MULTIPLYING INSTRUCTIONS
PMOVSXBW XMM1, XMM1
PMOVSXBW XMM2, XMM2

; MULTIPLY RGB VALUES BY MASK
PMULLW XMM1, XMM2

; CONVERT 16 BIT VALUES BACK TO 8 BIT
PACKSSWB XMM1, XMM1

; RETURN CORRECTED RGB VALUES ;
MOVQ RSI, XMM1 ;move RGB Values to rsi
;MOV [RDX], RSI ;move RGB Values to output array address
MOV [R13], RSI ;move RGB Values to output array address

ret
Correct endp
end
